import itertools
import random

# 定义特征集合
Feature = {'A', 'B', 'C', 'D', "E", "F", "G", "H", "I", "J"}

# 用于存储所有组合的列表
all_combinations = []

# 生成所有可能的组合
for r in range(2, len(Feature) + 1):  # 从2个字母开始，直到所有字母的组合
    combinations = itertools.combinations(Feature, r)
    for combo in combinations:
        all_combinations.append(''.join(combo))

# 将模式转换为0和1的形式
binary_patterns = []
for pattern in all_combinations:
    binary_pattern = [1 if letter in pattern else 0 for letter in Feature]
    binary_patterns.append(binary_pattern)

# 随机挑选X个模式，并从总模式集中删除
X = 3000  # 假设需要随机挑选10个模式
supprot_set_patterns = []
support_set_binary_patterns = []

for _ in range(X):
    if not all_combinations:  # 如果总模式集为空，则停止
        print("No more patterns available.")
        break
    # 随机选择一个索引
    random_index = random.randrange(len(all_combinations))
    # 将选中的模式和二进制形式添加到结果中
    supprot_set_patterns.append(all_combinations[random_index])
    support_set_binary_patterns.append(binary_patterns[random_index])
    # 从总模式集中删除选中的模式
    del all_combinations[random_index]
    del binary_patterns[random_index]


# 随机挑选X个模式，并从总模式集中删除
X = 20  # 假设需要随机挑选10个模式
query_set_patterns = []
query_set_binary_patterns = []

for _ in range(X):
    if not all_combinations:  # 如果总模式集为空，则停止
        print("No more patterns available.")
        break
    # 随机选择一个索引
    random_index = random.randrange(len(all_combinations))
    # 将选中的模式和二进制形式添加到结果中
    query_set_patterns.append(all_combinations[random_index])
    query_set_binary_patterns.append(binary_patterns[random_index])
    # 从总模式集中删除选中的模式
    del all_combinations[random_index]
    del binary_patterns[random_index]

# 初始化label字典
support_set_label = {
    'interesting': [],
    'uninteresting': [],
    'target': [[], []]
}

query_set_label = {
    'interesting': [],
    'uninteresting': [],
    'target': [[], []]
}

# 处理support set
for binary_pattern in support_set_binary_patterns:
    if binary_pattern[-1] == 1:  # 检查最后一位是否为1
        support_set_label['interesting'].append(binary_pattern)
        support_set_label['target'][0].append(1)  # 在target[0]中添加1
    else:
        support_set_label['uninteresting'].append(binary_pattern)
        support_set_label['target'][1].append(0)  # 在target[1]中添加0

# 处理query set
for binary_pattern in query_set_binary_patterns:
    if binary_pattern[-1] == 1:  # 检查最后一位是否为1
        query_set_label['interesting'].append(binary_pattern)
        query_set_label['target'][0].append(1)  # 在target[0]中添加1
    else:
        query_set_label['uninteresting'].append(binary_pattern)
        query_set_label['target'][1].append(0)  # 在target[1]中添加0


# 定义要添加的噪音数量
Z = 0  # 假设需要添加50个噪音模式

# 从剩余的binary_patterns中随机挑选Z个模式
noise_indices = random.sample(range(len(binary_patterns)), Z)
noise_patterns = [binary_patterns[i] for i in noise_indices]
noise_combinations = [all_combinations[i] for i in noise_indices]

# 将噪音模式随机插入support_set_label或query_set_label中
for binary_pattern in noise_patterns:
    # 随机决定插入到support_set_label还是query_set_label
    if random.choice([True, False]):  # 50%的概率插入到interesting
        support_set_label['interesting'].append(binary_pattern)
        support_set_label['target'][0].append(1)  # 在target[0]中添加1
    else:  # 插入到uninteresting
        support_set_label['uninteresting'].append(binary_pattern)
        support_set_label['target'][1].append(0)  # 在target[1]中添加0

# 从总模式集中删除噪音模式
for i in sorted(noise_indices, reverse=True):
    del binary_patterns[i]
    del all_combinations[i]
